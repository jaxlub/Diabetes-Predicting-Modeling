---
title: "Final_Project"
author: "Jax Lubkowitz"
format: html
editor: visual
---



```{r}
library(tidyverse)
library(shiny)
library(shinythemes)
data <- read.csv('/Users/jaxlub/Downloads/diabetes.csv')

data <- data |> 
  filter(Glucose != 0) |>
  filter(BloodPressure != 0) |>
  filter(SkinThickness != 0) |>
  filter(Insulin != 0) |>
  filter(BMI != 0)


data_pos <- data |> filter(Outcome == 1) 
data_neg <- data |> filter(Outcome == 0) 

# ggplot(data = data, aes(x = BMI, y = Age, color = Outcome)) +
#   geom_point()
# ggplot(data = data, aes(x = Glucose, y = Insulin, color = Outcome)) +
#   geom_point()
# ggplot(data = data, aes(x = DiabetesPedigreeFunction, y = Pregnancies, color = Outcome)) +
#   geom_point()
# ggplot(data = data, aes(x = SkinThickness, y = BloodPressure, color = Outcome)) +
#   geom_point()
```


# Modeling Code
## Bayesion Classifiers
```{r}
install.packages("e1071")
library(e1071) # naiveBayes
library(MASS) # lda, qda
install.packages("splitTools")
library(splitTools) # create_folds

# folds <- create_folds(data$Outcome, k = 5)
# 
# # Build an LDA classifier
# classify.lda <- lda(Outcome ~ ., data = data)
# classify.lda
# 
# 
# 
# # LDA error rate
# error <- rep(0, 5)
# i <- 1
# 
# for (train in folds) {
#   model <- lda(species ~ ., data = Iris[train,])
#   predictions <- predict(model, newdata = Iris[-train,])$class
#   error[i] <- mean(predictions != Iris[-train,]$species)
#   i <- i + 1
# }
# 
# mean(error)
```

# Compare models
```{r}
library(splitTools) # create_folds

# folds <- create_folds(data$Outcome, k = 5)
# # Naive Bayes error rate
# error <- rep(0, 5)
# i <- 1
# 
# for (train in folds) {
#   model <- naiveBayes(species ~ ., data = Iris[train,])
#   predictions <- predict(model, newdata = Iris[-train,])
#   error[i] <- mean(predictions != Iris[-train,]$species)
#   i <- i + 1
# }
# 
# mean(error)
```


# Un-adapted model visual code
Tab could be called Parttree Model
Idea: new tab and user can select two predictors for graph

Is there way to get model stats?
```{r}
library(tidymodels)
remotes::install_github("grantmcdermott/parttree")
library(parttree)
set.seed(123) ## For consistent jitter
# 
# data$Outcome = as.factor(data$Outcome)
# 
# ## Build our tree using parsnip (but with rpart as the model engine)
# tree =
#   decision_tree() |>
#   set_engine("rpart") |>
#   set_mode("classification") |>
#   fit(Outcome ~ BMI + Age, data = data)
# 
# 
# ## Plot the data and model partitions
# data |>
#   ggplot(aes(x = BMI, y = Age)) +
#   geom_jitter(aes(colour = Outcome), alpha = 0.7) +
#   geom_parttree(data = tree, aes(fill = Outcome), alpha = 0.1) +
#   labs(x = "Texture",
#        y = "Point Score",
#        title = "Classification Areas of Tumors",
#        subtitle = "Malignent and Benign Training Cases shown as Points")
```


# Shiny App
```{r}
columns = c("Pregnancies", 
            "Glucose", 
            "BloodPressure", 
            "SkinThickness", 
            "Insulin",  
            "BMI", 
            "DiabetesPedigreeFunction", 
            "Age")


ui <- fluidPage(
  navbarPage("Diabetes",
             tabPanel("Histogram",
                      sidebarPanel(
                        selectInput("xaxis", 
                                    label = "Select Predictor of Interest", 
                                    choices = columns)),
                      mainPanel(
                        plotOutput("histogram_neg"),
                        plotOutput("histogram_pos")
                      )),
             tabPanel("Logistic Model",
                      sidebarPanel(
                        checkboxGroupInput("log_predictors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = columns)),
                      mainPanel(
                        verbatimTextOutput("log_test_error"),
                        verbatimTextOutput("log_summary")
                      )),
             tabPanel("Naive Bayes Model",
                      sidebarPanel(
                        checkboxGroupInput("NB_predictors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = columns)),
                      mainPanel(
                        verbatimTextOutput("NB_test_error"),
                        verbatimTextOutput("NB_summary")
                      )),
             tabPanel("LDA Model",
                      sidebarPanel(
                        checkboxGroupInput("LDA_predictors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = columns)),
                      mainPanel(
                        verbatimTextOutput("LDA_test_error"),
                        verbatimTextOutput("LDA_summary")
                      )),
             tabPanel("QDA Model",
                      sidebarPanel(
                        checkboxGroupInput("QDA_predictors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = columns)),
                      mainPanel(
                        verbatimTextOutput("QDA_test_error"),
                        verbatimTextOutput("QDA_summary")
                      )),
             tabPanel("Parttree Model",
                      sidebarPanel(
                        checkboxGroupInput("PT_predictors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = head(columns,2))),
                        actionButton("PT_graph",
                                     label = "Graph"),
                      mainPanel(
                        plotOutput("PT_hist"),
                      ))
  )
)

server <- function(input, output, session) {
  # Histogram Tab
  output$histogram_neg <- renderPlot({
    ggplot(data = data_neg, aes(x = .data[[input$xaxis]])) +
      geom_histogram(fill = "cornflowerblue", color = "black") + 
      labs(title = glue::glue(input$xaxis," Distribution in Non-Diabetic Patients")) + 
      theme_minimal()
  })
  output$histogram_pos <- renderPlot({
    ggplot(data = data_pos, aes(x = .data[[input$xaxis]])) +
      geom_histogram(fill = "firebrick1", color = "black") + 
      labs(title = glue::glue(input$xaxis," Distribution in Diabetic Patients")) + 
      theme_minimal()
  })
  
  # Logistic Model Tab
  log_model <- reactive({
    text <- paste(input$log_predictors)
    predictors <- paste("Outcome ~", paste(input$log_predictors, collapse=" + "))
    diabetes.lm <- glm(as.formula(predictors), data = data, family = binomial)
    diabetes.lm
  })
  
  output$log_summary <- renderPrint({
    summary(log_model())
  })
  
  output$log_test_error <- renderPrint({
    text <- paste(input$log_predictors)
    predictors <- paste("Outcome ~", paste(input$log_predictors, collapse=" + "))
    folds <- create_folds(data$Outcome, k = 5)
    
    error <- rep(0, 5)
    i <- 1
    for (train in folds) {
      model <- glm(as.formula(predictors), data = data[train,], family = binomial)
      probabilities <- predict(model, newdata = data[-train,], type = "response")
      predictions <- ifelse(probabilities > 0.5, "1", "0")
      error[i] <- mean(predictions != data[-train,]$Outcome)
      i <- i + 1
    }
    
    text <- print(paste0("Train Error Rate: ", round(mean(error), digits = 5)))
  })
  
  # Naive Bayes Model Tab
  NB_model <- reactive({
    text <- paste(input$NB_predictors)
    predictors <- paste("Outcome ~", paste(input$NB_predictors, collapse=" + "))
    diabetes.nb <- naiveBayes(as.formula(predictors), data = data)
    diabetes.nb
  })

  output$NB_summary <- renderPrint({
    NB_model()
  })
  
  output$NB_test_error <- renderPrint({
    text <- paste(input$NB_predictors)
    predictors <- paste("Outcome ~", paste(input$NB_predictors, collapse=" + "))
    folds <- create_folds(data$Outcome, k = 5)
    
    error <- rep(0, 5)
    i <- 1
    for (train in folds) {
      model <- naiveBayes(as.formula(predictors), data = data[train,])
      predictions <- predict(model, newdata = data[-train,])
      error[i] <- mean(predictions != data[-train,]$Outcome)
      i <- i + 1
    }
    
    text <- print(paste0("Train Error Rate: ", round(mean(error), digits = 5)))
  })
  
  # LDA Model Tab
  LDA_model <- reactive({
    text <- paste(input$LDA_predictors)
    predictors <- paste("Outcome ~", paste(input$LDA_predictors, collapse=" + "))
    diabetes.lda <- lda(as.formula(predictors), data = data)
    diabetes.lda
  })
  
  output$LDA_summary <- renderPrint({
    LDA_model()
  })
  
  output$LDA_test_error <- renderPrint({
     text <- paste(input$LDA_predictors)
     predictors <- paste("Outcome ~", paste(input$LDA_predictors, collapse=" + "))
     folds <- create_folds(data$Outcome, k = 5)
     
     error <- rep(0, 5)
     i <- 1
     for (train in folds) {
       model <- lda(as.formula(predictors), data = data[train,])
       predictions <- predict(model, newdata = data[-train,])$class
       error[i] <- mean(predictions != data[-train,]$Outcome)
       i <- i + 1
     }

     text <- print(paste0("Train Error Rate: ", round(mean(error), digits = 5)))
  })   
  
  # QDA Model Tab
  QDA_model <- reactive({
    text <- paste(input$QDA_predictors)
    predictors <- paste("Outcome ~", paste(input$QDA_predictors, collapse=" + "))
    diabetes.qda <- qda(as.formula(predictors), data = data)
    diabetes.qda
  })
  
  output$QDA_summary <- renderPrint({
    QDA_model()
  })
  
  output$QDA_test_error <- renderPrint({
     text <- paste(input$QDA_predictors)
     predictors <- paste("Outcome ~", paste(input$QDA_predictors, collapse=" + "))
     folds <- create_folds(data$Outcome, k = 5)
     
     error <- rep(0, 5)
     i <- 1
     for (train in folds) {
       model <- qda(as.formula(predictors), data = data[train,])
       predictions <- predict(model, newdata = data[-train,])$class
       error[i] <- mean(predictions != data[-train,]$Outcome)
       i <- i + 1
     }

     text <- print(paste0("Train Error Rate: ", round(mean(error), digits = 5)))
  })

  # Parttree Model Tab
  graph <- eventReactive(input$PT_graph, {
    #if(length(input$PT_predictors) != 2){
    #  updateCheckboxGroupInput(session, "PT_predictors", selected= tail(input$PT_predictors,2))
    #}
    

    data$Outcome = as.factor(data$Outcome)
    
    text <- paste(input$PT_predictors)
    predictors <- paste("Outcome ~", paste(input$PT_predictors, collapse=" + "))
    
    tree =
      decision_tree() |>
      set_engine("rpart") |>
      set_mode("classification") |>
      fit(as.formula(predictors), data = data)
    
    graph <- data |>
      ggplot(aes(x = .data[[input$PT_predictors[1]]], y = .data[[input$PT_predictors[2]]])) +
      geom_jitter(aes(colour = Outcome), alpha = 0.7) +
      geom_parttree(data = tree, aes(fill = Outcome), alpha = 0.1) +
      labs(title = glue::glue("Classification Areas of Diabetes using ", input$PT_predictors[1]," and ", input$PT_predictors[2]),
           subtitle = "Positive and Negative Training Cases shown as Points")
    graph
  })
  
  output$PT_hist <- renderPlot({
    graph()
  })
  
  test <- reactive({
    observe({
      if(length(input$PT_predictors) > 2){
        updateCheckboxGroupInput(session, "PT_predictors", selected = head(input$PT_predictors,2))
      }
      if(length(input$SelecetedVars) < 1){
        updateCheckboxGroupInput(session, "PT_predictors", selected = head(columns,1))
      }
    })
  })
}

shinyApp(ui, server)
```









