---
title: "Final_Project"
author: "Jax Lubkowitz"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(shiny)
library(shinythemes)
data <- read.csv('/Users/jaxlub/Downloads/diabetes.csv')

data_pos <- data |> filter(Outcome == 1) 
data_neg <- data |> filter(Outcome == 0) 

ggplot(data = data, aes(x = BMI, y = Age, color = Outcome)) +
  geom_point()
ggplot(data = data, aes(x = Glucose, y = Insulin, color = Outcome)) +
  geom_point()
ggplot(data = data, aes(x = DiabetesPedigreeFunction, y = Pregnancies, color = Outcome)) +
  geom_point()
ggplot(data = data, aes(x = SkinThickness, y = BloodPressure, color = Outcome)) +
  geom_point()
```


# Modeling Code
## Logestic modeling
```{r}
# Build model with DiabetesPedigreeFunction
#diabetes.lm <- glm(Outcome ~ ., data = data, family = binomial)
#summary(diabetes.lm)

# Error rate 
probabilities <- predict(diabetes.lm, type = "response")
predictions <- ifelse(probabilities > 0.5, "1", "0")
mean(predictions != data$Outcome)


# Confusion matrix for the full model
probabilities <- predict(diabetes.lm, type = "response")
predictions <- ifelse(probabilities > 0.5, "1", "0")
table(predictions, data$Outcome)
```
## Bayesion classifiers
```{r}
install.packages("e1071")
library(e1071) # naiveBayes
library(MASS) # lda, qda
classify.nb <- naiveBayes(Outcome ~ ., data = data)
classify.nb


# Build an LDA classifier
classify.lda <- lda(Outcome ~ ., data = data)
classify.lda

# Build a QDA classifier
classify.qda <- qda(Outcome ~ ., data = data)
classify.qda
```

# Compare models
```{r}
install.packages("splitTools")
library(splitTools) # create_folds
folds <- create_folds(data$Outcome, k = 10)


# Naive Bayes error rate
error <- rep(0, 5)
i <- 1

for (train in folds) {
  model <- naiveBayes(species ~ ., data = Iris[train,])
  predictions <- predict(model, newdata = Iris[-train,])
  error[i] <- mean(predictions != Iris[-train,]$species)
  i <- i + 1
}

mean(error)
```


# Shiny App
```{r}
columns = c("Pregnancies", 
            "Glucose", 
            "BloodPressure", 
            "SkinThickness", 
            "Insulin",  
            "BMI", 
            "DiabetesPedigreeFunction", 
            "Age")


ui <- fluidPage(
  navbarPage("Diabetes",
             tabPanel("Histogram",
                      sidebarPanel(
                        selectInput("xaxis", 
                                    label = "Select Predictor of Interest", 
                                    choices = columns)),
                      mainPanel(
                        plotOutput("histogram_neg"),
                        plotOutput("histogram_pos")
                      )),
             tabPanel("Logistic Model",
                      sidebarPanel(
                        checkboxGroupInput("log_predictors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = "Glucose")),
                      mainPanel(
                        verbatimTextOutput("log_summary"),
                        #verbatimTextOutput("log_train_error"),
                      )),
             tabPanel("Naive Bayes Model",
                      sidebarPanel(
                        checkboxGroupInput("log_preditors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = "Glucose")),
                      mainPanel(
                      )),
             tabPanel("LDA Model",
                      sidebarPanel(
                        checkboxGroupInput("log_predicors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = columns)),
                      mainPanel(
                      )),
             tabPanel("QDA Model",
                      sidebarPanel(
                        checkboxGroupInput("log_predicors", 
                                           label = "Select Predictors of Interest", 
                                           choices = columns,
                                           selected = columns)),
                      mainPanel(
                      ))
  )
)

server <- function(input, output, session) {
  # Histogram Tab
  output$histogram_neg <- renderPlot({
    ggplot(data = data_neg, aes(x = .data[[input$xaxis]])) +
      geom_histogram(fill = "cornflowerblue", color = "black") + 
      labs(title = glue::glue(input$xaxis," Distribution in Non-Diabetic Patients")) + 
      theme_minimal()
  })
  output$histogram_pos <- renderPlot({
    ggplot(data = data_pos, aes(x = .data[[input$xaxis]])) +
      geom_histogram(fill = "firebrick1", color = "black") + 
      labs(title = glue::glue(input$xaxis," Distribution in Diabetic Patients")) + 
      theme_minimal()
  })
  
  # Logistic Model Tab
  log_model <- reactive({
    browser()
    input$log_predictors
    text <- paste(input$log_predictors)
    predictors <- paste("Outcome ~", paste(input$log_predictors, collapse=" + "))
    diabetes.lm <- glm(as.formula(predictors), data = data, family = binomial)
    diabetes.lm
  })
  
  output$log_summary <- renderPrint({
    summary(log_model())
  })
  
  # output$log_train_error <- renderPrint({
  #   probabilities <- predict(log_model(), type = "response")
  #   predictions <- ifelse(probabilities > 0.5, "1", "0")
  #   text <- print(paste0("Train Error Rate: ", round(mean(predictions != data$Outcome), digits = 5)))
  # })

  
  
  
}

shinyApp(ui, server)
```


```{r}
vec <- c("Age", "Glucose")
text <- paste("Outcome ~", paste(vec, collapse=" + "))
glm(as.formula(text), data = data, family = binomial)


diabetes.lm <- glm(Outcome ~ Age + Glucose , data = data, family = binomial)
summary(diabetes.lm)

```






