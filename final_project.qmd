---
title: "Final_Project"
author: "Jax Lubkowitz"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(shiny)
library(shinythemes)
data <- read.csv('/Users/jaxlub/Downloads/diabetes.csv')

data_pos <- data |> filter(Outcome == 1) 
data_neg <- data |> filter(Outcome == 0) 

ggplot(data = data, aes(x = BMI, y = Age, color = Outcome)) +
  geom_point()
ggplot(data = data, aes(x = Glucose, y = Insulin, color = Outcome)) +
  geom_point()
ggplot(data = data, aes(x = DiabetesPedigreeFunction, y = Pregnancies, color = Outcome)) +
  geom_point()
ggplot(data = data, aes(x = SkinThickness, y = BloodPressure, color = Outcome)) +
  geom_point()
```


# Modeling Code
## Logestic modeling
```{r}
# Build model with DiabetesPedigreeFunction
diabetes.lm <- glm(Outcome ~ ., data = data, family = binomial)
summary(diabetes.lm)

# Error rate 
probabilities <- predict(diabetes.lm, type = "response")
predictions <- ifelse(probabilities > 0.5, "1", "0")
mean(predictions != data$Outcome)


# Confusion matrix for the full model
probabilities <- predict(diabetes.lm, type = "response")
predictions <- ifelse(probabilities > 0.5, "1", "0")
table(predictions, data$Outcome)
```



# Shiny App
```{r}
columns = c("Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin",  "BMI", "DiabetesPedigreeFunction", "Age")

ui <- fluidPage(navbarPage("Diabetes",
                           tabPanel("Histogram",
                                    sidebarPanel(
                                      selectInput("xaxis", 
                                                  label = "Select Predictor of Interest", 
                                                  choices = columns)),
                           mainPanel(plotOutput("histogram_neg"),
                                     plotOutput("histogram_pos")
                )),
                tabPanel("Models",
                         sidebarPanel(selectInput("6axis", 
                                                  label = "Select Predictor of Interest", 
                                                  choices = columns)),
                         mainPanel()
                )))

server <- function(input, output, session) {
  output$histogram_neg <- renderPlot({
    ggplot(data = data_neg, aes(x = .data[[input$xaxis]])) +
      geom_histogram(fill = "cornflowerblue", color = "black") + 
      labs(title = glue::glue(input$xaxis," Distribution in Non-Diabetic Patients")) + 
      theme_minimal()
  })
  output$histogram_pos <- renderPlot({
    ggplot(data = data_pos, aes(x = .data[[input$xaxis]])) +
      geom_histogram(fill = "firebrick1", color = "black") + 
      labs(title = glue::glue(input$xaxis," Distribution in Diabetic Patients")) + 
      theme_minimal()
  })
}

shinyApp(ui, server)
```








